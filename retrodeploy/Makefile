# ============================================================
# TRYONYOU RETRODEPLOY ‚Äî Makefile
# Build + Commit + Vercel Deploy Automation
# ============================================================

.PHONY: all build commit deploy clean install help

# Default target
all: install build commit deploy

# Help target
help:
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo "  TRYONYOU RETRODEPLOY ‚Äî Makefile Commands"
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
	@echo ""
	@echo "  make all       - Full pipeline: install, build, commit, deploy"
	@echo "  make install   - Install npm dependencies"
	@echo "  make build     - Build project with Vite 7.1.2"
	@echo "  make commit    - Commit and push changes to main"
	@echo "  make deploy    - Deploy to Vercel production"
	@echo "  make clean     - Clean build artifacts and logs"
	@echo "  make watch     - Start watcher daemon for auto-sync"
	@echo "  make help      - Show this help message"
	@echo ""
	@echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# Install dependencies
install:
	@echo "üì¶ Installing dependencies..."
	@cd .. && npm install
	@echo "‚úÖ Dependencies installed"

# Build project with Vite
build:
	@echo "üî® Building project with Vite 7.1.2..."
	@cd .. && npm run build
	@echo "‚úÖ Build completed"

# Commit changes to main
commit:
	@echo "üíæ Committing changes to main branch..."
	@cd .. && git add .
	@cd .. && git commit -m "üöÄ RETRODEPLOY: Auto-commit $(shell date +%Y%m%d_%H%M%S)" || echo "‚ö†Ô∏è  No changes to commit"
	@cd .. && git push origin main || echo "‚ö†Ô∏è  Push failed - may need manual intervention"
	@echo "‚úÖ Changes committed and pushed"

# Deploy to Vercel production
deploy:
	@echo "üöÄ Deploying to Vercel production (tryonyou.app)..."
	@if command -v vercel &> /dev/null; then \
		cd .. && vercel --prod --yes; \
		echo "‚úÖ Deployed to https://tryonyou.app"; \
	else \
		echo "‚ö†Ô∏è  Vercel CLI not found. Install with: npm install -g vercel"; \
		exit 1; \
	fi

# Clean build artifacts and logs
clean:
	@echo "üßπ Cleaning build artifacts and logs..."
	@cd .. && rm -rf dist node_modules/.vite
	@rm -f retrodeploy.log
	@echo "‚úÖ Clean completed"

# Start watcher daemon
watch:
	@echo "üëÅÔ∏è  Starting watcher daemon..."
	@if [ -f watcher.js ]; then \
		node watcher.js; \
	else \
		echo "‚ö†Ô∏è  watcher.js not found"; \
		exit 1; \
	fi

# Quick deploy (build + deploy only)
quick:
	@echo "‚ö° Quick deploy (build + deploy)..."
	@$(MAKE) build
	@$(MAKE) deploy

# Full retrodeploy (use deploy.sh)
retrodeploy:
	@echo "üéØ Running full retrodeploy script..."
	@./deploy.sh

# Verify deployment
verify:
	@echo "üîç Verifying deployment..."
	@HTTP_CODE=$$(curl -s -o /dev/null -w "%{http_code}" https://tryonyou.app); \
	if [ "$$HTTP_CODE" = "200" ]; then \
		echo "‚úÖ tryonyou.app is responding with 200 OK"; \
	else \
		echo "‚ö†Ô∏è  tryonyou.app responded with code: $$HTTP_CODE"; \
	fi

# Check logs
logs:
	@if [ -f retrodeploy.log ]; then \
		tail -n 50 retrodeploy.log; \
	else \
		echo "‚ö†Ô∏è  No log file found"; \
	fi
