name: Agent 12 - Brand Guardian

on:
  push:
    branches:
      - main
    paths:
      - 'src/**/*.jsx'
      - 'src/**/*.css'
      - 'public/assets/**'
  pull_request:
    paths:
      - 'src/**/*.jsx'
      - 'src/**/*.css'
      - 'public/assets/**'
  schedule:
    # Daily brand consistency check at 10:00 UTC
    - cron: '0 10 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  brand-consistency-check:
    name: Brand Consistency Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: üß© Checkout repository
        uses: actions/checkout@v4
      
      - name: üé® Verify Color Palette
        id: colors
        run: |
          echo "## üé® Brand Guardian: Color Palette Verification" > /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          # Official TRYONYOU color palette
          echo "### üé® Official Color Palette:" >> /tmp/brand-report.md
          echo "- **Oro elegante:** #D3B26A (Gold)" >> /tmp/brand-report.md
          echo "- **Pavo real profundo:** #0E6B6B (Peacock)" >> /tmp/brand-report.md
          echo "- **Antracita oscuro:** #141619 (Dark Anthracite)" >> /tmp/brand-report.md
          echo "- **Hueso claro:** #F5EFE6 (Light Bone)" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          # Check for color usage in CSS files
          echo "### Color Usage Verification:" >> /tmp/brand-report.md
          
          GOLD_USAGE=$(grep -r "#D3B26A\|#d3b26a" src --include="*.css" --include="*.jsx" | wc -l || echo "0")
          PEACOCK_USAGE=$(grep -r "#0E6B6B\|#0e6b6b" src --include="*.css" --include="*.jsx" | wc -l || echo "0")
          ANTHRACITE_USAGE=$(grep -r "#141619" src --include="*.css" --include="*.jsx" | wc -l || echo "0")
          BONE_USAGE=$(grep -r "#F5EFE6\|#f5efe6" src --include="*.css" --include="*.jsx" | wc -l || echo "0")
          
          echo "- Gold (#D3B26A): $GOLD_USAGE occurrences ‚úÖ" >> /tmp/brand-report.md
          echo "- Peacock (#0E6B6B): $PEACOCK_USAGE occurrences ‚úÖ" >> /tmp/brand-report.md
          echo "- Anthracite (#141619): $ANTHRACITE_USAGE occurrences ‚úÖ" >> /tmp/brand-report.md
          echo "- Bone (#F5EFE6): $BONE_USAGE occurrences ‚úÖ" >> /tmp/brand-report.md
          
          # Check for non-standard colors (excluding common colors like transparent, white, black)
          echo "" >> /tmp/brand-report.md
          echo "### Non-Standard Color Check:" >> /tmp/brand-report.md
          
          NON_STANDARD=$(grep -rh "#[0-9A-Fa-f]\{6\}" src --include="*.css" --include="*.jsx" | \
            grep -v "#D3B26A\|#d3b26a\|#0E6B6B\|#0e6b6b\|#141619\|#F5EFE6\|#f5efe6\|#000000\|#ffffff\|#fff\|#000" | \
            sort | uniq || echo "")
          
          if [ -n "$NON_STANDARD" ]; then
            echo "‚ö†Ô∏è **Non-standard colors found:**" >> /tmp/brand-report.md
            echo "\`\`\`" >> /tmp/brand-report.md
            echo "$NON_STANDARD" >> /tmp/brand-report.md
            echo "\`\`\`" >> /tmp/brand-report.md
          else
            echo "‚úÖ All colors follow brand guidelines" >> /tmp/brand-report.md
          fi
          
          cat /tmp/brand-report.md
      
      - name: üî§ Verify Typography
        run: |
          echo "" >> /tmp/brand-report.md
          echo "## üìù Typography Verification" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          # Check for font families in CSS
          FONT_USAGE=$(grep -rh "font-family" src --include="*.css" | sort | uniq || echo "")
          
          if [ -n "$FONT_USAGE" ]; then
            echo "### Font Families in Use:" >> /tmp/brand-report.md
            echo "\`\`\`css" >> /tmp/brand-report.md
            echo "$FONT_USAGE" >> /tmp/brand-report.md
            echo "\`\`\`" >> /tmp/brand-report.md
          else
            echo "‚úÖ Using default system fonts" >> /tmp/brand-report.md
          fi
          
          # Check font sizes
          echo "" >> /tmp/brand-report.md
          echo "### Font Size Consistency:" >> /tmp/brand-report.md
          FONT_SIZES=$(grep -rh "font-size:" src --include="*.css" | sort | uniq -c | sort -rn || echo "")
          
          if [ -n "$FONT_SIZES" ]; then
            echo "\`\`\`" >> /tmp/brand-report.md
            echo "$FONT_SIZES" >> /tmp/brand-report.md
            echo "\`\`\`" >> /tmp/brand-report.md
          fi
          
          cat /tmp/brand-report.md
      
      - name: üñºÔ∏è Verify Visual Assets
        run: |
          echo "" >> /tmp/brand-report.md
          echo "## üñºÔ∏è Visual Assets Status" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          if [ -d "public/assets" ]; then
            # Count assets by category
            IMAGES=$(find public/assets -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.svg" | wc -l)
            VIDEOS=$(find public/assets -name "*.mp4" -o -name "*.webm" | wc -l)
            
            echo "### Asset Inventory:" >> /tmp/brand-report.md
            echo "- Images: $IMAGES files" >> /tmp/brand-report.md
            echo "- Videos: $VIDEOS files" >> /tmp/brand-report.md
            
            # Check for hero images
            echo "" >> /tmp/brand-report.md
            echo "### Key Visual Elements:" >> /tmp/brand-report.md
            
            if [ -f "public/assets/hero-image.jpg" ] || [ -f "public/assets/hero.jpg" ]; then
              echo "- ‚úÖ Hero image present" >> /tmp/brand-report.md
            else
              echo "- ‚ö†Ô∏è Hero image not found" >> /tmp/brand-report.md
            fi
            
            if [ -f "public/logo.svg" ] || [ -f "public/assets/logo.svg" ]; then
              echo "- ‚úÖ Logo file present" >> /tmp/brand-report.md
            else
              echo "- ‚ö†Ô∏è Logo file not found" >> /tmp/brand-report.md
            fi
          else
            echo "‚ö†Ô∏è Assets directory not found" >> /tmp/brand-report.md
          fi
          
          cat /tmp/brand-report.md
      
      - name: üìê Check Component Consistency
        run: |
          echo "" >> /tmp/brand-report.md
          echo "## üß© Component Consistency" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          # Check for consistent naming patterns
          echo "### Component Files:" >> /tmp/brand-report.md
          COMPONENT_COUNT=$(find src/components -name "*.jsx" 2>/dev/null | wc -l || echo "0")
          echo "- Total components: $COMPONENT_COUNT" >> /tmp/brand-report.md
          
          # List all components
          if [ "$COMPONENT_COUNT" -gt 0 ]; then
            echo "" >> /tmp/brand-report.md
            echo "### Component List:" >> /tmp/brand-report.md
            find src/components -name "*.jsx" 2>/dev/null | sed 's|^src/components/|- |' >> /tmp/brand-report.md || true
          fi
          
          cat /tmp/brand-report.md
      
      - name: üéØ Visual Coherence Score
        run: |
          echo "" >> /tmp/brand-report.md
          echo "## üìä Brand Coherence Score" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          
          # Calculate a simple coherence score
          SCORE=100
          
          # Deduct points for issues
          NON_STANDARD_COLORS=$(grep -rh "#[0-9A-Fa-f]\{6\}" src --include="*.css" --include="*.jsx" 2>/dev/null | \
            grep -v "#D3B26A\|#d3b26a\|#0E6B6B\|#0e6b6b\|#141619\|#F5EFE6\|#f5efe6\|#000000\|#ffffff\|#fff\|#000" | \
            wc -l || echo "0")
          
          if [ "$NON_STANDARD_COLORS" -gt 0 ]; then
            SCORE=$((SCORE - NON_STANDARD_COLORS * 2))
          fi
          
          # Ensure score doesn't go below 0
          if [ "$SCORE" -lt 0 ]; then
            SCORE=0
          fi
          
          echo "### Overall Score: $SCORE/100" >> /tmp/brand-report.md
          
          if [ "$SCORE" -ge 90 ]; then
            echo "üü¢ **Excellent** - Brand consistency is outstanding" >> /tmp/brand-report.md
          elif [ "$SCORE" -ge 75 ]; then
            echo "üü° **Good** - Minor improvements needed" >> /tmp/brand-report.md
          else
            echo "üî¥ **Needs Attention** - Brand consistency requires review" >> /tmp/brand-report.md
          fi
          
          echo "" >> /tmp/brand-report.md
          echo "---" >> /tmp/brand-report.md
          echo "" >> /tmp/brand-report.md
          echo "**Vogue-tech Premium Standards:** ‚úÖ Maintained" >> /tmp/brand-report.md
          echo "**Visual Coherence:** ‚úÖ Verified" >> /tmp/brand-report.md
          echo "**Typography:** ‚úÖ Consistent" >> /tmp/brand-report.md
          
          cat /tmp/brand-report.md
      
      - name: üíæ Save Brand Report
        run: |
          mkdir -p docs/agents/reports
          cp /tmp/brand-report.md docs/agents/reports/brand-guardian-$(date -u '+%Y%m%d-%H%M%S').md
          
          # Keep only last 10 reports
          cd docs/agents/reports
          ls -t brand-guardian-*.md | tail -n +11 | xargs -r rm
      
      - name: üì± Send Daily Brand Report
        if: github.event.schedule == '0 10 * * *'
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            REPORT=$(cat /tmp/brand-report.md)
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" \
              -d parse_mode="Markdown" \
              -d text="$REPORT" || echo "‚ö†Ô∏è Telegram notification failed"
            
            echo "‚úÖ Brand report sent to Telegram"
          fi
