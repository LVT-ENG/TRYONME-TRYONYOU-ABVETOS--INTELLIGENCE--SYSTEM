name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS for large files
      
      - name: Checkout LFS objects
        run: git lfs pull
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Verify docs/legal in build
        run: |
          echo "Checking if docs/legal was copied to dist..."
          if [ -d "dist/docs/legal" ]; then
            echo "‚úÖ docs/legal directory found in dist"
            ls -la dist/docs/legal/
          else
            echo "‚ùå docs/legal directory NOT found in dist"
            exit 1
          fi
      
      - name: List all files in dist
        run: find dist -type f | sort
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Deploy to Vercel
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: Setup Node for screenshots
        if: success()
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install Puppeteer
        if: success()
        run: |
          npm install puppeteer
      
      - name: Wait for deployment
        if: success()
        run: sleep 10
      
      - name: Capture screenshots
        if: success()
        id: screenshots
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          
          (async () => {
            const url = '${{ steps.vercel-deploy.outputs.preview-url }}' || 'https://tryonyou.app';
            console.log('üì∏ Capturando screenshots de:', url);
            
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            try {
              // Desktop screenshot
              const pageDesktop = await browser.newPage();
              await pageDesktop.setViewport({ width: 1920, height: 1080 });
              await pageDesktop.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
              await pageDesktop.screenshot({ path: 'screenshot-desktop.png', fullPage: false });
              console.log('‚úÖ Screenshot desktop capturado');
              await pageDesktop.close();
              
              // Mobile screenshot
              const pageMobile = await browser.newPage();
              await pageMobile.setViewport({ width: 375, height: 667 });
              await pageMobile.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
              await pageMobile.screenshot({ path: 'screenshot-mobile.png', fullPage: false });
              console.log('‚úÖ Screenshot mobile capturado');
              await pageMobile.close();
              
              console.log('‚úÖ Screenshots capturados exitosamente');
            } catch (error) {
              console.error('‚ùå Error capturando screenshots:', error);
              process.exit(1);
            } finally {
              await browser.close();
            }
          })();
          "
      
      - name: Upload screenshots
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            screenshot-desktop.png
            screenshot-mobile.png
          retention-days: 7
      
      - name: Send Telegram notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "‚ö†Ô∏è Telegram no configurado - saltando notificaci√≥n"
            exit 0
          fi
          
          # Determinar estado
          if [ "${{ job.status }}" == "success" ]; then
            STATUS_EMOJI="‚úÖ"
            STATUS_TEXT="Exitoso"
          else
            STATUS_EMOJI="‚ùå"
            STATUS_TEXT="Fallido"
          fi
          
          # Preparar mensaje
          MESSAGE="$STATUS_EMOJI *Deploy ${STATUS_TEXT}*
          
          üöÄ *Agente 22: Deploy Operator*
          ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
          
          üì¶ Commit: \`${{ github.sha }}\`
          üë§ Autor: ${{ github.actor }}
          üåø Branch: ${{ github.ref_name }}
          üí¨ Mensaje: ${{ github.event.head_commit.message }}
          
          üåê URL: ${{ steps.vercel-deploy.outputs.preview-url }}
          
          ‚è∞ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ü§ñ Deploy autom√°tico 24√ó7 activo"
          
          # Enviar mensaje
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="${MESSAGE}" \
            -d parse_mode="Markdown" \
            -d disable_web_page_preview=true
          
          echo "‚úÖ Notificaci√≥n Telegram enviada"
