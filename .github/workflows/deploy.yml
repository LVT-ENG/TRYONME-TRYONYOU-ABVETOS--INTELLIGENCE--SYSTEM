name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true  # Enable Git LFS for large files
      
      - name: Checkout LFS objects
        run: git lfs pull
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Verify docs/legal in build
        run: |
          echo "Checking if docs/legal was copied to dist..."
          if [ -d "dist/docs/legal" ]; then
            echo "‚úÖ docs/legal directory found in dist"
            ls -la dist/docs/legal/
          else
            echo "‚ùå docs/legal directory NOT found in dist"
            exit 1
          fi
      
      - name: List all files in dist
        run: find dist -type f | sort
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  deploy:
    name: Deploy to Vercel (Agent 22)
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
      
      - name: Setup Node.js for screenshots
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Install Puppeteer
        run: npm install puppeteer
      
      - name: Capture Screenshots
        run: |
          node -e "
          const puppeteer = require('puppeteer');
          
          (async () => {
            const browser = await puppeteer.launch({
              headless: 'new',
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            
            // Desktop screenshot
            await page.setViewport({ width: 1920, height: 1080 });
            await page.goto('https://tryonyou.app', { waitUntil: 'networkidle0', timeout: 60000 });
            await page.screenshot({ path: '/tmp/screenshot-desktop.png', fullPage: false });
            
            // Mobile screenshot
            await page.setViewport({ width: 375, height: 812 });
            await page.goto('https://tryonyou.app', { waitUntil: 'networkidle0', timeout: 60000 });
            await page.screenshot({ path: '/tmp/screenshot-mobile.png', fullPage: false });
            
            await browser.close();
            console.log('‚úÖ Screenshots captured successfully');
          })();
          "
      
      - name: Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: deployment-screenshots
          path: /tmp/screenshot-*.png
          retention-days: 7
      
      - name: Send Telegram Notification with Screenshots
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -n "$TELEGRAM_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            # Send text message
            MESSAGE="üöÄ *Agent 22: Deploy Operator*

‚úÖ *Status:* Deployment Successful
üåê *URL:* https://tryonyou.app
üì¶ *Commit:* \`${GITHUB_SHA:0:7}\`
üí¨ *Message:* ${{ github.event.head_commit.message }}
üåø *Branch:* ${{ github.ref_name }}
üë§ *Author:* ${{ github.actor }}
‚è∞ *Time:* $(date -u '+%Y-%m-%d %H:%M:%S UTC')

ü§ñ All agents operational 24/7"
            
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
              -d chat_id="${TELEGRAM_CHAT_ID}" \
              -d parse_mode="Markdown" \
              -d text="$MESSAGE"
            
            # Send desktop screenshot
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendPhoto" \
              -F chat_id="${TELEGRAM_CHAT_ID}" \
              -F photo=@/tmp/screenshot-desktop.png \
              -F caption="üñ•Ô∏è Desktop View (1920x1080)"
            
            # Send mobile screenshot
            curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendPhoto" \
              -F chat_id="${TELEGRAM_CHAT_ID}" \
              -F photo=@/tmp/screenshot-mobile.png \
              -F caption="üì± Mobile View (375x812)"
            
            echo "‚úÖ Telegram notifications sent"
          else
            echo "‚ö†Ô∏è Telegram credentials not configured"
          fi
