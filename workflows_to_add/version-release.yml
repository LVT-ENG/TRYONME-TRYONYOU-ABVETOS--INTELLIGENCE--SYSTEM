name: Version Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'public/**'
      - 'index.html'
      - 'package.json'
      - 'vite.config.js'

jobs:
  version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
      
      - name: Configure Git
        run: |
          git config --global user.name "ABVETOS Bot"
          git config --global user.email "bot@abvetos.com"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Determine release type
        id: release_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect from commit messages
            COMMITS=$(git log --format=%B -n 10)
            if echo "$COMMITS" | grep -qiE "^(BREAKING CHANGE|feat!|fix!):"; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -qiE "^feat:"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Generate version and changelog
        run: |
          npm run release:${{ steps.release_type.outputs.type }}
      
      - name: Get new version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 New version: $VERSION"
      
      - name: Push changes
        run: |
          git push --follow-tags origin main
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
      
      - name: Generate version badge
        run: |
          echo "![Version](https://img.shields.io/badge/version-${{ steps.version.outputs.version }}-blue)" > VERSION_BADGE.md
      
      - name: Notify success
        run: |
          echo "✅ Version ${{ steps.version.outputs.version }} released successfully!"
          echo "📝 Changelog updated"
          echo "🏷️  Git tag created: v${{ steps.version.outputs.version }}"

