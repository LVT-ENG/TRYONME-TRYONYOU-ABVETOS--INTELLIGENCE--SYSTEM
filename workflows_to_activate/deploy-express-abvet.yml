name: Deploy with Smart QA

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

env:
  NODE_VERSION: '20'
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  QA_AUTH_TOKEN: ${{ secrets.QA_AUTH_TOKEN }}

jobs:
  # Job 1: Build y Test
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint || echo "Linter not configured"
        
      - name: Run tests
        run: npm test || echo "Tests not configured"
        
      - name: Build project
        run: npm run build || echo "Build not configured"
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job 2: Deploy a Cloudflare
  deploy:
    name: Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'
    
    outputs:
      deployment-url: ${{ steps.deploy.outputs.url }}
      deployment-id: ${{ steps.deploy.outputs.deployment-id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: tryonyou-app
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set deployment outputs
        run: |
          echo "url=${{ steps.deploy.outputs.url }}" >> $GITHUB_OUTPUT
          echo "deployment-id=${{ github.sha }}" >> $GITHUB_OUTPUT

  # Job 3: Smart QA Agent
  qa-check:
    name: Smart QA Agent
    runs-on: ubuntu-latest
    needs: deploy
    if: github.event_name == 'push'
    
    steps:
      - name: Wait for deployment to be ready
        run: sleep 30
        
      - name: Trigger Smart QA Agent
        id: qa
        run: |
          RESPONSE=$(curl -X POST https://tryonyou.app/api/qa/trigger \
            -H "Authorization: Bearer ${{ secrets.QA_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "deployId": "${{ github.sha }}",
              "url": "${{ needs.deploy.outputs.deployment-url }}"
            }' \
            -w "\n%{http_code}" \
            -s)
          
          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')
          
          echo "HTTP Code: $HTTP_CODE"
          echo "Response: $BODY"
          
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "❌ QA Agent request failed"
            exit 1
          fi
          
          echo "$BODY" > qa-results.json
          
      - name: Parse QA Results
        id: parse
        run: |
          STATUS=$(jq -r '.status' qa-results.json)
          FAILED=$(jq -r '.summary.failed' qa-results.json)
          WARNINGS=$(jq -r '.summary.warnings' qa-results.json)
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "failed=$FAILED" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          
          echo "### QA Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** $STATUS" >> $GITHUB_STEP_SUMMARY
          echo "**Failed Tests:** $FAILED" >> $GITHUB_STEP_SUMMARY
          echo "**Warnings:** $WARNINGS" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload QA Results
        uses: actions/upload-artifact@v4
        with:
          name: qa-results
          path: qa-results.json
          retention-days: 30
          
      - name: Check QA Status
        if: steps.parse.outputs.status == 'failed'
        run: |
          echo "❌ QA checks failed!"
          echo "Failed tests: ${{ steps.parse.outputs.failed }}"
          exit 1
          
      - name: Comment PR with QA Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('qa-results.json', 'utf8'));
            
            const body = `## 🤖 Smart QA Agent Results
            
            **Status:** ${results.status === 'success' ? '✅ Passed' : '❌ Failed'}
            **Deploy ID:** \`${results.deployId}\`
            **URL:** ${results.targetUrl}
            
            ### Summary
            - ✅ Passed: ${results.summary.passed}
            - ❌ Failed: ${results.summary.failed}
            - ⚠️ Warnings: ${results.summary.warnings}
            
            ### Test Details
            ${results.tests.map(test => `
            **${test.name}**
            - Status: ${test.status}
            - Details: ${JSON.stringify(test.details, null, 2)}
            `).join('\n')}
            
            *Duration: ${results.duration}ms*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  # Job 4: Capturas Automatizadas
  screenshots:
    name: Capture Screenshots
    runs-on: ubuntu-latest
    needs: [deploy, qa-check]
    if: success()
    
    steps:
      - name: 🔁 Checkout repository
        uses: actions/checkout@v4
        
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: 📦 Install Playwright
        run: |
          npm install -D playwright
          npx playwright install chromium
          
      - name: 📸 Capture Screenshots
        run: |
          bash scripts/capture-screenshots.sh ${{ needs.deploy.outputs.deployment-url }} screenshots
          
      - name: 📤 Upload Screenshots
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: screenshots/
          retention-days: 30

  # Job 5: Sincronización con Google Drive
  sync-drive:
    name: Sync to Google Drive
    runs-on: ubuntu-latest
    needs: [deploy, qa-check, screenshots]
    if: success()
    
    steps:
      - name: 🔁 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📥 Download Screenshots
        uses: actions/download-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: screenshots/
          
      - name: 📥 Download QA Results
        uses: actions/download-artifact@v4
        with:
          name: qa-results-${{ github.sha }}
          path: qa-results/
        continue-on-error: true
          
      - name: 💾 Create Deploy Log
        run: |
          mkdir -p logs
          cat > logs/deploy_${{ github.sha }}.log << EOF
          Deploy Log
          ==========
          Date: $(date -Iseconds)
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}
          Author: ${{ github.actor }}
          URL: ${{ needs.deploy.outputs.deployment-url }}
          Status: Success
          EOF
          
      - name: 💾 Upload to S3 (Manus CDN)
        run: |
          # Subir screenshots a S3 para acceso público
          for file in screenshots/*; do
            if [ -f "$file" ]; then
              manus-upload-file "$file" || echo "Failed to upload $file"
            fi
          done
        continue-on-error: true
          
      - name: 📸 Send Telegram with Screenshots
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}
        run: |
          # Enviar notificación con screenshots
          MESSAGE="📦 *Deploy Package Ready*%0A%0A"
          MESSAGE+="*Commit:* \`${{ github.sha }}\`%0A"
          MESSAGE+="*URL:* ${{ needs.deploy.outputs.deployment-url }}%0A%0A"
          MESSAGE+="📸 Screenshots captured%0A"
          MESSAGE+="💾 Logs generated%0A"
          MESSAGE+="✅ Ready for review"
          
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="$MESSAGE" \
            -d parse_mode=Markdown

  # Job 6: Notificación de éxito
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [deploy, qa-check, screenshots, sync-drive]
    if: success()
    
    steps:
      - name: Send Telegram notification
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "✅ *Deployment Successful*\n\n*Repo:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n*URL:* ${{ needs.deploy.outputs.deployment-url }}\n\n✅ All QA checks passed!",
              "parse_mode": "Markdown"
            }'

  # Job 7: Notificación de fallo
  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [deploy, qa-check, screenshots, sync-drive]
    if: failure()
    
    steps:
      - name: Send Telegram notification
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' }}
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "❌ *Deployment Failed*\n\n*Repo:* ${{ github.repository }}\n*Branch:* ${{ github.ref_name }}\n*Commit:* `${{ github.sha }}`\n\n❌ QA checks failed. Please review the logs.",
              "parse_mode": "Markdown"
            }'

